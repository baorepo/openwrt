name: Build Raspberry Pi 4 CM4's OpenWrt

on:
  repository_dispatch:
    types: [openwrt, cm4]
  workflow_dispatch:
  schedule:
    - cron: 0 18 * * *
#  watch:
#    types: started

env:
  CONFIG_FILE: configs/rpi_cm4_defconfig 
  IPV6MOD_IN_FIRMWARE: true
  KMODS_IN_FIRMWARE: true
  WEBROOT: /data/dnmp/www/openwrt.cc
  UPLOAD_RCLONE: true
  UPLOAD_WETRANSFER: true
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-20.04

    outputs:
      OPENWRTROOT: ${{ steps.update.outputs.OPENWRTROOT }}
      GENERATE_STATUS: ${{ steps.generate.outputs.GENERATE_STATUS }}

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804) tree
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          git config --global user.name "I'm a Code Bot"
          git config --global user.email "baozhu.zuo@gmail.com"

      - name: Build Source Code
        run: |
          df -hT $PWD
          ./build.sh
          cd openwrt
          echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV
          echo "::set-output name=OPENWRTROOT::$(echo $PWD)"
          echo "::set-output name=GENERATE_STATUS::success"


      - name: Upload Bin Folder
        uses: actions/upload-artifact@main
        if: steps.generate.outputs.GENERATE_STATUS == 'success'
        with:
          name: bin-archive
          path: openwrt/bin

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: "openwrt-21.02"
          directory: "openwrt"
          repository: "Seeed-Studio/seeed-linux-openwrt"
          force: true

  Upload:
    needs: [Build]
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Restore Variables
        run: |
          echo "OPENWRTROOT=$(echo '${{needs.Build.outputs.OPENWRTROOT}}')" >> $GITHUB_ENV
          echo "PLATFORM=$(echo '${{needs.Build.outputs.PLATFORM}}')" >> $GITHUB_ENV
          echo "TARGET=$(echo '${{needs.Build.outputs.TARGET}}')" >> $GITHUB_ENV
          echo "SUBTARGET=$(echo '${{needs.Build.outputs.SUBTARGET}}')" >> $GITHUB_ENV
          echo "FIRMWARE=$(echo '${{needs.Build.outputs.FIRMWARE}}')" >> $GITHUB_ENV
          echo "GENERATE_STATUS=$(echo '${{needs.Build.outputs.GENERATE_STATUS}}')" >> $GITHUB_ENV

      - name: Download Bin Folder
        uses: actions/download-artifact@v2
        if: env.GENERATE_STATUS == 'success'
        with:
          name: bin-archive
          path: openwrt/bin

      - name: Deploy Packages-Server
        if: env.GENERATE_STATUS == 'success'
        run: |
          sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          mkdir -p server/web/snapshots/targets/$TARGET/$SUBTARGET
          cp -r $OPENWRTROOT/bin/packages server/web/snapshots
          cp -r $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET/packages server/web/snapshots/targets/$TARGET/$SUBTARGET
          mv server packages-server
          zip -qrm packages-server.zip packages-server
          mv packages-server.zip $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET

      - name: Rclone Upload
        env:
          RCLONE_PACKAGE: ${{ secrets.RCLONE_PACKAGE }}
          RCLONE_FIRMWARE: ${{ secrets.RCLONE_FIRMWARE }}
        if: env.GENERATE_STATUS == 'success' && env.UPLOAD_RCLONE == 'true' && env.RCLONE_PACKAGE != ''
        run: |
          cd $OPENWRTROOT
          curl https://rclone.org/install.sh | sudo bash
          mkdir -p ~/.config/rclone/
          cat << EOF > ~/.config/rclone/rclone.conf
          ${{ secrets.RCLONE_CONFIG }}
          EOF
          rclone copy bin $RCLONE_PACKAGE:$(date +"%Y-%m-%d")/lean --filter-from ../data/rclone/upload-rule.txt
          rclone copy bin/targets $RCLONE_FIRMWARE:$(date +"%Y-%m-%d")/lean --exclude "packages/"
          echo "::warning file=Firmware-GoogleDrive::Download Link: https://drive.google.com/drive/folders/1_P2RoPbguY99qJxmCU4SKUgP8Kg0Xr03"

      - name: Deploy Files To HostHatch Node
        id: hosthatch
        env:
          HOST: "${{ secrets.REMOTE_USER }}@${{ secrets.HOSTHATCH_IP }}"
          SOURCE_TARGETS: "openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/"
          DEST_TARGETS: "${{ env.WEBROOT }}/releases/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/"
          REMOTE_PRIVATEKEY: "${{secrets.HOSTHATCH_PRIVATEKEY}}"
        if: env.REMOTE_PRIVATEKEY != null
        run: |
          mkdir -p ~/.ssh/
          install -m 600 /dev/null ~/.ssh/id_rsa
          echo "${{secrets.HOSTHATCH_PRIVATEKEY}}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -q -t -i ~/.ssh/id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $HOST \
          bash -c "'mkdir -p $WEBROOT/releases/targets/$TARGET/$SUBTARGET \
          $WEBROOT/archive/$(date +%Y)/$(date +%m)/$(date +%d)/releases/targets/$TARGET/$SUBTARGET'"
          rsync -chavP --delete -e 'ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no' $SOURCE_TARGETS $HOST:$DEST_TARGETS
          ssh -q -t -i ~/.ssh/id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $HOST \
          bash -c "'rsync -axv --delete $WEBROOT/releases/targets/$TARGET/$SUBTARGET $WEBROOT/archive/$(date +%Y)/$(date +%m)/$(date +%d)/releases/targets/$TARGET/$SUBTARGET'"

      - name: Deploy Files To OVH Node
        id: ovh
        env:
          HOST: "${{ secrets.REMOTE_USER }}@${{ secrets.OVH_IP }}"
          SOURCE_TARGETS: "openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/"
          DEST_TARGETS: "${{ env.WEBROOT }}/releases/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/"
          REMOTE_PRIVATEKEY: "${{secrets.OVH_PRIVATEKEY}}"
        if: env.REMOTE_PRIVATEKEY != null
        run: |
          mkdir -p ~/.ssh/
          install -m 600 /dev/null ~/.ssh/id_rsa
          echo "${{secrets.OVH_PRIVATEKEY}}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -q -t -i ~/.ssh/id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $HOST \
          bash -c "'mkdir -p $WEBROOT/releases/targets/$TARGET/$SUBTARGET'"
          rsync -chavP --delete -e 'ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no' $SOURCE_TARGETS $HOST:$DEST_TARGETS

      - name: Deploy Files To PacificRack Node
        id: pacificrack
        env:
          HOST: "${{ secrets.REMOTE_USER }}@${{ secrets.PACIFICRACK_IP }}"
          SOURCE_TARGETS: "openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/"
          DEST_TARGETS: "${{ env.WEBROOT }}/releases/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/"
          REMOTE_PRIVATEKEY: "${{secrets.PACIFICRACK_PRIVATEKEY}}"
        if: env.REMOTE_PRIVATEKEY != null
        run: |
          mkdir -p ~/.ssh/
          install -m 600 /dev/null ~/.ssh/id_rsa
          echo "${{secrets.PACIFICRACK_PRIVATEKEY}}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -q -t -i ~/.ssh/id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $HOST \
          bash -c "'mkdir -p $WEBROOT/releases/targets/$TARGET/$SUBTARGET'"
          rsync -chavP --delete -e 'ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no' $SOURCE_TARGETS $HOST:$DEST_TARGETS

      - name: Organize Files
        id: organize
        if: env.GENERATE_STATUS == 'success'
        run: |
          cd ${FIRMWARE}
          rm -rf packages
          cd $OPENWRTROOT/bin/targets/$TARGET/
          curl -sL https://git.io/file-transfer | bash -s beta
          sudo mv transfer /usr/bin
          sudo chmod +x /usr/bin/transfer
          df -hT $PWD
          echo "::set-output name=ORGANIZE_STATUS::success"

      - name: Upload Firmware To WeTransfer
        if: steps.organize.outputs.ORGANIZE_STATUS == 'success' && env.UPLOAD_WETRANSFER == 'true'
        run: |
          transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
          echo "::warning file=Firmware-Wetransfer.com::$(cat wetransfer.log | grep https)"

      - name: Delete Artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            bin-archive
